#!/usr/bin/env perl

use strict;
use warnings;
use utf8;

use Config::General;
use Data::Dumper;
use Getopt::Long;
use Log::Log4perl;

use constant THREADS_NUM => 5;
use constant DATASET_SIZE => 1000;

our %ENV;

# Determine home dir
my $script_home_dir = $ENV{LOGPARSER_HOME} or
    script_fail("LOGPARSER_HOME env variable is not set");

# Read config file
my $conf = Config::General->new("$script_home_dir/etc/logparser.conf");
my %config = $conf->getall();

# Get options and the input log file
my %options = ();
GetOptions(\%options,
    'threads=i',
    'dataset_size=i',
    'help',
    'db_host=s',
    'db_user=s',
    'db_password=s',
    'db_name=s'
) or die "Error in command line arguments";

# Process options
if ($options{help}) {
    print_usage();
    exit(0);
}

# Override config values for any option provided
foreach my $option (qw(threads dataset_size)) {
    $config{'parser'}{$option} = $options{$option} if (exists $options{$option});
}
foreach my $option (grep('/^db_/', keys %options)) {
    $config{'database'}{$option} = $options{$option};
}

# Validate config values
foreach my $param (qw(threads dataset_size)) {
    unless (exists $config{'parser'}{$param}) {
        script_fail("please provide a value for parser/$param or set it as --${param}");
    }
}
foreach my $param (qw(db_host db_user db_password db_name)) {
    unless (exists $config{'database'}{$param}) {
        script_fail("please provide a value for database/$param or set it as --${param}");
    }
}

# Check for input maillog file
script_fail("No input maillog file specified") if (scalar(@ARGV) == 0);
my $maillog_file = shift;

# We are DONE
script_success();

sub print_usage {
    print << 'USAGE_INFO';
log_parser - Parse maillog file

USAGE:

    log_parser [OPTION ...] <MAIL LOGFILE>

OPTIONS:

    --threads=<THREADS_NUM>
        A number of worker threads to run, default: 5

    --dataset_size=<DATASET_SIZE>
        The size of data that will be loaded from maillog for processing.
        Default: 1000 records (lines)

    --db_host=<DB_HOST>
        Target database hostname/IP-address

    --db_user=<DB_USER>
        DB connection username

    --db_password=<DB_PASSWORD>
        DB connection password

    --db_name=<DB_NAME>
        Target database name

USAGE_INFO
}

sub script_success {
    print "DONE.\n";
    exit(0);
}

sub script_fail {
    my $error_msg = shift;
    print "===> ERROR: $error_msg\n";
    print_usage();
    exit(1);
}

